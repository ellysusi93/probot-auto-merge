"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var logger_1 = require("./utils/logger");
var get_ts_jest_config_1 = require("./utils/get-ts-jest-config");
var imports_1 = require("./utils/imports");
var babel;
var istanbulPlugin;
var jestPreset;
function importBabelDeps() {
    if (babel)
        return;
    babel = imports_1.importBabelCore();
    istanbulPlugin = imports_1.importBabelPluginIstanbul();
    jestPreset = imports_1.importBabelPresetJest();
}
function postProcessCode(jestConfig, transformOptions, transpileOutput, filePath) {
    var postHook = exports.getPostProcessHook(jestConfig);
    return postHook(transpileOutput, filePath, jestConfig, transformOptions);
}
exports.postProcessCode = postProcessCode;
function createBabelTransformer(options) {
    importBabelDeps();
    var presets = options.presets.slice();
    var plugins = options.plugins.slice();
    if (!hasBabelAddon(presets, jestPreset)) {
        presets.push(jestPreset);
    }
    var hasIstanbul = hasBabelAddon(plugins, istanbulPlugin);
    var optionsBase = __assign({}, options, { presets: presets, plugins: plugins });
    delete optionsBase.cacheDirectory;
    var babelTransformer = function (codeSourcemapPair, filename, config, transformOptions) {
        var inputSourceMap = typeof codeSourcemapPair.map === 'string'
            ? JSON.parse(codeSourcemapPair.map)
            : codeSourcemapPair.map;
        var theseOptions = __assign({}, optionsBase, { filename: filename,
            inputSourceMap: inputSourceMap });
        if (transformOptions && transformOptions.instrument) {
            theseOptions.auxiliaryCommentBefore = ' istanbul ignore next ';
            if (!hasIstanbul) {
                theseOptions.plugins = theseOptions.plugins.concat([
                    istanbulPluginConfig(config),
                ]);
            }
        }
        return babel.transform(codeSourcemapPair.code, theseOptions);
    };
    return babelTransformer;
}
exports.getPostProcessHook = function (jestConfig) {
    var tsJestConfig = get_ts_jest_config_1.default(jestConfig);
    if (tsJestConfig.skipBabel) {
        logger_1.logOnce('Not using any postprocess hook.');
        return function (input) { return input; };
    }
    var tsJestBabelConfig = tsJestConfig.babelConfig || {};
    var babelOptions = __assign({}, tsJestBabelConfig, { babelrc: tsJestConfig.useBabelrc || false, plugins: toArray(tsJestBabelConfig.plugins), presets: toArray(tsJestBabelConfig.presets), sourceMaps: tsJestConfig.disableSourceMapSupport ? false : 'both' });
    logger_1.logOnce('Using babel with options:', babelOptions);
    return createBabelTransformer(babelOptions);
};
function toArray(iter) {
    return iter ? Array.from(iter) : [];
}
function istanbulPluginConfig(jestConfig) {
    return [
        istanbulPlugin,
        {
            cwd: jestConfig.rootDir,
            exclude: [],
        },
    ];
}
function hasBabelAddon(inputList) {
    var addonMatches = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        addonMatches[_i - 1] = arguments[_i];
    }
    return inputList.some(function (item) {
        return addonMatches.indexOf(Array.isArray(item) ? item[0] : item) !== -1;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdHByb2Nlc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcG9zdHByb2Nlc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQVdBLHlDQUF5QztBQUN6QyxpRUFBeUQ7QUFDekQsMkNBSXlCO0FBR3pCLElBQUksS0FBYSxDQUFDO0FBQ2xCLElBQUksY0FBb0MsQ0FBQztBQUN6QyxJQUFJLFVBQTRCLENBQUM7QUFFakM7SUFDRSxJQUFJLEtBQUs7UUFBRSxPQUFPO0lBRWxCLEtBQUssR0FBRyx5QkFBZSxFQUFFLENBQUM7SUFDMUIsY0FBYyxHQUFHLG1DQUF5QixFQUFFLENBQUM7SUFDN0MsVUFBVSxHQUFHLCtCQUFxQixFQUFFLENBQUM7QUFDdkMsQ0FBQztBQUdELHlCQUNFLFVBQThCLEVBQzlCLGdCQUF1QyxFQUN2QyxlQUF1QyxFQUN2QyxRQUFnQjtJQUVoQixJQUFNLFFBQVEsR0FBRywwQkFBa0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVoRCxPQUFPLFFBQVEsQ0FBQyxlQUFlLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzNFLENBQUM7QUFURCwwQ0FTQztBQUVELGdDQUNFLE9BQThCO0lBRTlCLGVBQWUsRUFBRSxDQUFDO0lBQ2xCLElBQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEMsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUd4QyxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsRUFBRTtRQUN2QyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzFCO0lBSUQsSUFBTSxXQUFXLEdBQUcsYUFBYSxDQUFDLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUczRCxJQUFNLFdBQVcsZ0JBQVEsT0FBTyxJQUFFLE9BQU8sU0FB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